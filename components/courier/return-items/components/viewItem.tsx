import React from "react";
import { jsPDF } from "jspdf";

interface DataRow {
  id: number;
  returnDate: string;
  productName: string;
  returnReason: string;
  returnQuantity: number;
  condition: string;
  driverName: string;
  returnStatus: string;
  proofOfReturn: string;
}

interface ViewModalProps {
  row: DataRow | null;  // Make row nullable
  onClose: () => void;
}

const ViewModal: React.FC<ViewModalProps> = ({ row, onClose }) => {
  if (!row) {
    return null; // Don't render anything if row is null
  }
const handleDownloadPDF = () => {
  const doc = new jsPDF();

  const margin = 20;
  const lineHeight = 10;
  const pageHeight = doc.internal.pageSize.height;
  const pageWidth = doc.internal.pageSize.width;
  const logoPath = '/logo-without-bg.png';
  const logoWidth = 30;
  const logoHeight = 20;
  const title = 'Return Item Details';
  const totalWidth = logoWidth + doc.getTextWidth(title) + 5;
  const logoX = (pageWidth - totalWidth) / 2;

  // Add logo and title (only for the first page)
  doc.addImage(logoPath, 'PNG', logoX, margin, logoWidth, logoHeight);
  doc.setFontSize(16);
  doc.text(title, logoX + logoWidth + 5, margin + logoHeight / 2);

  // Add contact information (centered)
  doc.setFontSize(10);
  const contactInfo = [
    '2nd Floor Total Pulo Cabuyao, Pulo Diezmo Rd, Cabuyao, Laguna',
    'Mobile: +639 270 454 343 / +639 193 455 535',
    'Email: gdrlogisticsinc@outlook.com',
  ];

  contactInfo.forEach((text, index) => {
    const textWidth = doc.getTextWidth(text);
    doc.text(text, (pageWidth / 2) - textWidth / 2, margin + logoHeight + 10 + index * 10);
  });

  // Add a line under the contact info for separation
  doc.setLineWidth(0.5);
  doc.line(margin, margin + logoHeight + 40, pageWidth - margin, margin + logoHeight + 40);

  // Set font for body content
  doc.setFont("helvetica", "normal");

  // Define container width for labels and values
  const containerWidth = pageWidth - 2 * margin; // Container width covering the page width
  const labelWidth = 60; // Fixed width for labels
  const valueX = labelWidth + 20; // Value should be positioned right after label with a small gap

  // Start position for content
  let y = margin + logoHeight + 50;

  // Add data with labels and values (colon separator)
  const details = [
    { label: "Product Name", value: row.productName },
    { label: "Return Date", value: row.returnDate },
    { label: "Return Reason", value: row.returnReason },
    { label: "Return Quantity", value: row.returnQuantity.toString() },
    { label: "Condition", value: row.condition },
    { label: "Driver Name", value: row.driverName },
    { label: "Return Status", value: row.returnStatus },
    { label: "Proof of Return", value: `${process.env.NEXT_PUBLIC_SERVER_PORT}/proofs/${row.proofOfReturn}` },
  ];

  // Function to add text with a colon separator
  const addTextWithColon = (label:any, value:any, yPosition:any) => {
    doc.setFontSize(12);

    // Add label on the left (fixed width)
    const labelWithColon = `${label}:`; // Append colon to the label
    const labelX = margin; // Start at the left margin for the label

    // Add value on the right, positioned after label
    const valueX = labelX + labelWidth + 10; // Position value after label with a small space

    // Add label and value with colon separator
    doc.text(labelWithColon, labelX, yPosition); 
    doc.text(value, valueX, yPosition);

    return yPosition + lineHeight; // Return new y-position for the next section
  };

  // Add each detail row
  let yPosition = y;
  details.forEach(detail => {
    yPosition = addTextWithColon(detail.label, detail.value, yPosition);
  });

  // Add a line to separate sections (after the text)
  doc.line(margin, yPosition, pageWidth - margin, yPosition);

  // Render the proof of return image (scaled to fit within the PDF width)
  const imageUrl = `${process.env.NEXT_PUBLIC_SERVER_PORT}/${row.proofOfReturn}`;
  const imageWidth = containerWidth - 1 * margin; // Image should use the full container width
  const imageHeight = 100; // Height of the image
  doc.addImage(imageUrl, 'JPEG', margin, yPosition + 10, imageWidth, imageHeight); // Position image just below the text

  // Add a footer (e.g., page number or custom text)
  doc.setFontSize(10);
  doc.text("Generated by Your Company", margin, doc.internal.pageSize.height - 10);

  // Save the PDF with a name
  doc.save(`ReturnItem_${row.productName}_details.pdf`);
  onClose()
};

return (
  <div className="fixed inset-0 flex justify-center items-center px-4 sm:px-6 bg-gray-500 bg-opacity-50">
    <div className="bg-white p-6 sm:p-8 md:p-10 rounded-xl w-full max-w-md sm:max-w-lg md:max-w-2xl lg:max-w-lg shadow-xl sm:top-14 sm:left-[690px] sm:w-80 lg:w-full sm:absolute md:left-40 md:w-fit lg:left-1/3 
    ">
      <h2 className="text-xl sm:text-2xl md:text-3xl font-semibold text-center text-gray-900 mb-4 sm:mb-6">
        Return Item Details
      </h2>

      <div className="sm:flex flex-col sm:gap-6 md:grid sm:grid-cols-1 lg:grid-cols-2 ">
        <div className="flex justify-between text-sm sm:text-base">
          <p><strong className="font-medium">Product Name:</strong></p>
          <p className="text-gray-600">{row.productName}</p>
        </div>
        <div className="flex justify-between text-sm sm:text-base">
          <p><strong className="font-medium">Return Date:</strong></p>
                     
  {new Date(row.returnDate).toLocaleDateString("en-GB", {
    day: "2-digit",
    month: "short",
    year: "numeric",
  }).replace(/ /g, "-")}

        </div>
        <div className="flex justify-between text-sm sm:text-base">
          <p><strong className="font-medium">Return Reason:</strong></p>
          <p className="text-gray-600">{row.returnReason}</p>
        </div>
        <div className="flex justify-between text-sm sm:text-base">
          <p><strong className="font-medium">Return Quantity:</strong></p>
          <p className="text-gray-600">{row.returnQuantity}</p>
        </div>
        <div className="flex justify-between text-sm sm:text-base">
          <p><strong className="font-medium">Condition:</strong></p>
          <p className="text-gray-600">{row.condition}</p>
        </div>
        <div className="flex justify-between text-sm sm:text-base">
          <p><strong className="font-medium">Driver Name:</strong></p>
          <p className="text-gray-600">{row.driverName}</p>
        </div>
        <div className="flex justify-between text-sm sm:text-base">
          <p><strong className="font-medium">Return Status:</strong></p>
          <p className="text-gray-600">{row.returnStatus}</p>
        </div>

        <div className="col-span-2">
          <p><strong className="font-medium text-sm sm:text-base">Proof of Return:</strong></p>
          <div className="mt-4 flex justify-center">
            <img
              src={`${process.env.NEXT_PUBLIC_SERVER_PORT}/${row.proofOfReturn}`}
              alt="Proof of Return"
              className="w-full max-w-xs sm:max-w-sm md:max-w-lg rounded-xl shadow-lg md:w-72 md:h-full lg:w-full"
            />
          </div>
        </div>
      </div>

      <div className="mt-6 flex justify-center text-center space-x-4 sm:space-x-6">
        <button
          onClick={handleDownloadPDF}
          className="px-4 sm:px-6 py-2 sm:py-3 bg-blue-600 text-white text-sm sm:text-base font-semibold rounded-lg shadow-lg hover:bg-blue-700 focus:outline-none transition-all duration-200"
        >
          Download PDF
        </button>
        <button
          onClick={onClose}
          className="px-4 sm:px-6 py-2 sm:py-3 bg-gray-200 text-gray-700 text-sm sm:text-base font-semibold rounded-lg hover:bg-gray-300 focus:outline-none transition-all duration-200"
        >
          Close
        </button>
      </div>
    </div>
  </div>
);







};

export default ViewModal;
